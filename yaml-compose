#!/usr/bin/env groovy

/*
/   Copyright 2020 Jorge Omar Bautista Valenzuela
/
/   Licensed under the Apache License, Version 2.0 (the "License");
/   you may not use this file except in compliance with the License.
/   You may obtain a copy of the License at
/
/       http://www.apache.org/licenses/LICENSE-2.0
/
/   Unless required by applicable law or agreed to in writing, software
/   distributed under the License is distributed on an "AS IS" BASIS,
/   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/   See the License for the specific language governing permissions and
/   limitations under the License.
*/
import groovy.cli.commons.CliBuilder

def env = System.getenv()
final String BIN_FOLDER = env['YAML_COMPOSE_DIR']+File.separator+'bin'
final String VERSION = '0.3.0'
System.setProperty('YAML_COMPOSE_VERSION', VERSION)
System.setProperty('YAML_COMPOSE_BIN', BIN_FOLDER)

class YamlProcessor {
    File inputFile
    File outputFile

    boolean recursive = false
    String delimiter = '$include'
    String parent

    def readSpaces = { line ->
        int includeIndex = line.indexOf(delimiter)
        line.substring(0, includeIndex)
    }

    def containsDelimiter = { line ->
        line.contains(delimiter)
    }

    def readFileName = { line ->
        int filenameIndex = line.indexOf(':') + 1
        line.substring(filenameIndex).trim()
    }

    def isYamlFile = { filename ->
        String extension = filename.substring(filename.lastIndexOf('.')+1)
        extension in ['yaml', 'yml']
    }

    def readFileWithSpaces = { filepath, spaces ->
        StringBuilder builder = new StringBuilder()
        File file = new File(parent, filepath)
        println("Processing file: ${file.absolutePath}")
        if(!file.exists() || file.isDirectory()) {
            throw new RuntimeException("Invalid filepath: [$filepath].")
        }

        file.text.eachLine { String line ->
            if(recursive && containsDelimiter(line)) {
                builder.append(extractIncludeContent(spaces.concat(line)))
            } else {
                builder.append(spaces)
                        .append(line)
                        .append('\n')
            }
        }
        builder.toString()
    }

    def extractIncludeContent = { line ->
        if (containsDelimiter(line)) {
            String spaces = readSpaces(line)
            String fileName = readFileName(line)
            readFileWithSpaces(fileName, spaces)
        } else {
            line
        }
    }

    void start() {
        try {
            println("Start processing ${inputFile.name} into ${outputFile.name}")
            outputFile.withWriter('utf-8') { writer ->
                inputFile.eachLine { line ->
                    writer.writeLine(extractIncludeContent(line))
                }
            }
            println("Finish processing file, results are in: ${outputFile.absolutePath}")
        } catch(RuntimeException e){
            e.printStackTrace()
            outputFile.delete()
        }
    }
}

def yamlProcessor = new YamlProcessor()
// CLI Commands definition
def cli = new CliBuilder(usage: 'yaml-compose -[hvroi]')

cli.with {
    h(longOpt: 'help', 'Usage Information \n', required: false)
    v(longOpt: 'version','shows the version of the script', required: false)
    r(longOpt: 'recursive','recursively look in the other files for inclusions', required: false)
    i(convert: { new File(it) }, longOpt: 'input','name of the yaml file to process [required]', required: false)
    o(convert: { new File(it) }, longOpt: 'output','output filename by default output.yml', required: false)
}

// Read the input from console
def options = cli.parse(args)

if (options.v) {
    println "yaml-compose version $VERSION"
    return
}

if (options.h) {
    cli.usage()
    return
}

if (options.r) {
    println "Running on recursive mode"
}

if(!options.i || !yamlProcessor.isYamlFile(options.i.name)) {
    println "You need to provide a valid YAML file path"
    cli.usage()
    return
}


// Initialize processor and start merging files
String parentDir = options.i.absoluteFile.parent

yamlProcessor.with {
    inputFile = options.i
    outputFile = options.o ?: new File(parentDir, 'output.yml')
    recursive = options.r
    parent = parentDir
}

yamlProcessor.start()