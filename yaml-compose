#!/usr/bin/env groovy

/*
/   Copyright 2020 Jorge Omar Bautista Valenzuela
/
/   Licensed under the Apache License, Version 2.0 (the "License");
/   you may not use this file except in compliance with the License.
/   You may obtain a copy of the License at
/
/       http://www.apache.org/licenses/LICENSE-2.0
/
/   Unless required by applicable law or agreed to in writing, software
/   distributed under the License is distributed on an "AS IS" BASIS,
/   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/   See the License for the specific language governing permissions and
/   limitations under the License.
*/
String version = '0.1.0'

// CLI Commands definition
import groovy.cli.commons.CliBuilder

class YamlUtil {
    boolean recursive = false
    String delimiter = '$include'

    def readSpaces = { String line ->
        int includeIndex = line.indexOf(delimiter)
        line.substring(0, includeIndex)
    }

    def containsDelimiter = { String line ->
        line.contains(delimiter)
    }

    def readFileName = { String line ->
        int filenameIndex = line.indexOf(':') + 1
        line.substring(filenameIndex).trim()
    }

    def isYamlFile = { String filename ->
        String extension = filename.substring(filename.lastIndexOf('.')+1)
        extension in ['yaml', 'yml']
    }

    def readFileWithSpaces = { String filepath, String spaces ->
        StringBuilder builder = new StringBuilder()
        File file = new File(filepath)
        if(!file.exists()) {
            throw new RuntimeException("File [$filepath] does not exists")
        }
        file.text.eachLine { String line ->
            if(recursive && containsDelimiter(line)) {
                extractIncludeContent(spaces.concat(line))
            } else {
                builder.append(spaces)
                        .append(line)
                        .append('\n')
            }
        }
        builder.toString()
    }

    def extractIncludeContent = { String line ->
        if (containsDelimiter(line)) {
            String spaces = readSpaces(line)
            String fileName = readFileName(line)
            readFileWithSpaces(fileName, spaces)
        } else {
            line
        }
    }
}

def cli = new CliBuilder(usage: 'yaml-compose -[hvroi]')

cli.with {
    h(longOpt: 'help', 'Usage Information \n', required: false)
    v(longOpt: 'version','shows the version of the script', required: false)
    r(longOpt: 'recursive','recursively look in the other files for inclusions', required: false)
    i(convert: { new File(it) }, longOpt: 'input','name of the yaml file to process [required]', required: false)
    o(convert: { new File(it) }, longOpt: 'output','output filename by default output.yml', required: false)
}

// Read the input from console
def options = cli.parse(args)

YamlUtil yamlUtil = new YamlUtil(recursive: options.r)

if (options.v) {
    println "yaml-compose version $version"
    return
}

if (options.h) {
    cli.usage()
    return
}

if(!options.i || !yamlUtil.isYamlFile(options.i.name)) {
    println "You need to provide a valid YAML file path"
    cli.usage()
    return
}

File inputFile = options.i
File outputFile = options.o ?: new File('output.yml')

try {
    println("Start processing ${inputFile.name} into ${outputFile.name}")
    outputFile.withWriter('utf-8') { writer ->
        inputFile.eachLine { line ->
            writer.writeLine(yamlUtil.extractIncludeContent(line))
        }
    }
    println("Finish processing file, results are in: ${outputFile.absolutePath}")
} catch(RuntimeException e){
    e.printStackTrace()
    outputFile.delete()
}